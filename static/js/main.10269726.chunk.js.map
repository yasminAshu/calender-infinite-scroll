{"version":3,"sources":["component/Day.js","component/Week.js","component/Months.js","component/DayNames.js","component/Calender.js","App.js","serviceWorker.js","index.js"],"names":["Day","props","day","date","isCurrentMonth","isToday","number","selected","key","toString","className","isSame","Week","days","month","select","i","name","format","substring","Date","push","clone","add","Months","state","loaded","weeks","done","this","startOf","count","monthIndex","renderWeeks","React","Component","DayNames","Calendar","handleScroll","e","Number","target","scrollTop","clientHeight","scrollHeight","next","previous","lastMonth","length","subtract","setState","renderMonthLabel","moment","refs","iScroll","addEventListener","cMonths","Array","isArray","map","mon","index","ref","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10269726.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Day = (props)=> {\r\n    const {\r\n        day: {\r\n            date,\r\n            isCurrentMonth,\r\n            isToday,\r\n            number\r\n        },\r\n        selected\r\n    } = props;\r\n\r\n    return (\r\n        <span\r\n            key={date.toString()}\r\n            className={\"day\" + (isToday ? \" today\" : \"\") + (isCurrentMonth ? \"\" : \" different-month\") + (date.isSame(selected) ? \" selected\" : \"\")}>{number}</span>\r\n    );\r\n\r\n}\r\nexport default Day","import React from \"react\";\r\nimport Day from \"./Day.js\";\r\n\r\nconst Week = props => {\r\n  let days = [];\r\n  let { date } = props;\r\n\r\n  const { month, selected, select } = props;\r\n\r\n  for (var i = 0; i < 7; i++) {\r\n    let day = {\r\n      name: date.format(\"dd\").substring(0, 1),\r\n      number: date.date(),\r\n      isCurrentMonth: date.month() === month.month(),\r\n      isToday: date.isSame(new Date(), \"day\"),\r\n      date: date\r\n    };\r\n    days.push(<Day day={day} selected={selected} select={select} />);\r\n    date = date.clone();\r\n    date.add(1, \"day\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"row week\" key={days[0]}>\r\n      {days}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Week;\r\n","import React from \"react\";\r\nimport Week from \"./Week\";\r\n\r\nclass Months extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loaded: true\r\n    };\r\n  }\r\n\r\n  renderWeeks() {\r\n    let weeks = [];\r\n    let done = false;\r\n    let date = this.props.month\r\n      .clone()\r\n      .startOf(\"month\")\r\n      .add(\"w\" - 1)\r\n      .day(\"Sunday\");\r\n    let count = 0;\r\n    let monthIndex = date.month();\r\n\r\n    const { selected, month } = this.props;\r\n\r\n    while (!done) {\r\n      weeks.push(\r\n        <Week\r\n          key={date}\r\n          date={date.clone()}\r\n          month={month}\r\n          select={day => this.props.select(day)}\r\n          selected={selected}\r\n        />\r\n      );\r\n\r\n      date.add(1, \"w\");\r\n\r\n      done = count++ > 2 && monthIndex !== date.month();\r\n      monthIndex = date.month();\r\n    }\r\n\r\n    return weeks;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <section>{this.renderWeeks()}</section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Months;\r\n","import React from 'react'\r\n\r\n export const  DayNames = () => {\r\n    return (\r\n        <div className=\"row day-names\">\r\n            <span className=\"day\">Sun</span>\r\n            <span className=\"day\">Mon</span>\r\n            <span className=\"day\">Tue</span>\r\n            <span className=\"day\">Wed</span>\r\n            <span className=\"day\">Thu</span>\r\n            <span className=\"day\">Fri</span>\r\n            <span className=\"day\">Sat</span>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport Months from \"./Months\";\r\nimport \"../css/calender-style.css\";\r\nimport { DayNames } from \"./DayNames\";\r\n\r\nexport default class Calendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      month: [moment()],\r\n      selected: moment().startOf(\"day\")\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refs.iScroll.addEventListener(\"scroll\", e => {\r\n      this.handleScroll(e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   *@discription - This function is to handle the scroll position of the calender\r\n    @param e - current target\r\n   */\r\n  handleScroll = e => {\r\n    let scrollPosition = Number(\r\n      e.target.scrollTop + e.target.clientHeight + 100\r\n    );\r\n    if (scrollPosition >= e.target.scrollHeight) {\r\n      this.next();\r\n    }\r\n  };\r\n\r\n  /**\r\n   *@discription - This function is to load the previous calender\r\n   */\r\n  previous = () => {\r\n    let month = this.state.month;\r\n    let lastMonth = month[month.length - 1];\r\n    month.push(lastMonth.subtract(1, \"month\"));\r\n    this.setState({\r\n      month: month\r\n    });\r\n  };\r\n\r\n  /**\r\n   *@discription - This function is to load the next calender\r\n   */\r\n  next = () => {\r\n    let month = this.state.month;\r\n    let lastMonth = month[month.length - 1];\r\n    month.push(lastMonth.add(1, \"month\"));\r\n    this.setState({\r\n      month: month\r\n    });\r\n  };\r\n\r\n  /**\r\n   *@discription - This function is to render the header of the calender\r\n   */\r\n  renderMonthLabel = () => {\r\n    let month = this.state.month[this.state.month.length - 1];\r\n    return (\r\n      <span className=\"month-label\">{month && month.format(\"MMMM YYYY\")}</span>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let cMonths =\r\n      Array.isArray(this.state.month) &&\r\n      this.state.month.map((mon, index) => {\r\n        return (\r\n          <Months\r\n            select={this.select}\r\n            selected={this.state.selected}\r\n            month={mon}\r\n          />\r\n        );\r\n      });\r\n    return (\r\n      <div>\r\n        <section ref=\"iScroll\" className=\"calendar\">\r\n          <header className=\"header\">\r\n            <div className=\"month-display row\">\r\n              <i\r\n                className=\"arrow fa fa-angle-left\"\r\n                onClick={this.props.previous}\r\n              />\r\n              {this.renderMonthLabel()}\r\n              <i\r\n                className=\"arrow fa fa-angle-right\"\r\n                onClick={this.props.next}\r\n              />\r\n            </div>\r\n            <DayNames />\r\n          </header>\r\n          {cMonths}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport Calendar from './component/Calender'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Calendar />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}