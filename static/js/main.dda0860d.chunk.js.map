{"version":3,"sources":["component/Day.js","component/Week.js","component/Months.js","component/DayNames.js","component/Calender.js","App.js","serviceWorker.js","index.js"],"names":["Day","props","day","date","isCurrentMonth","isToday","number","select","selected","key","toString","className","isSame","onClick","Week","days","month","i","name","format","substring","Date","push","clone","add","Months","state","loaded","weeks","done","this","startOf","count","monthIndex","renderWeeks","React","Component","DayNames","Calendar","previous","lastMonth","length","subtract","setState","next","renderMonthLabel","moment","refs","iScroll","addEventListener","e","scrollPosition","Number","target","scrollTop","clientHeight","console","log","scrollHeight","which","cMonths","Array","isArray","map","mon","index","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAuBeA,EArBH,SAACC,GAAU,IAEfC,EASAD,EATAC,IAFc,EAWdD,EARAC,IACIC,EAJU,EAIVA,KACAC,EALU,EAKVA,eACAC,EANU,EAMVA,QACAC,EAPU,EAOVA,OAEJC,EAEAN,EAFAM,OACAC,EACAP,EADAO,SAGJ,OACI,0BACIC,IAAKN,EAAKO,WACVC,UAAW,OAASN,EAAU,SAAW,KAAOD,EAAiB,GAAK,qBAAuBD,EAAKS,OAAOJ,GAAY,YAAc,IACnIK,QAAS,kBAAMN,EAAOL,KAAOI,ICsB1BQ,EAvCF,SAACb,GAYN,IAXJ,IAAIc,EAAO,GAEHZ,EACAF,EADAE,KAIAa,EAGAf,EAHAe,MACAR,EAEAP,EAFAO,SACAD,EACAN,EADAM,OAGKU,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIf,EAAM,CACNgB,KAAMf,EAAKgB,OAAO,MAAMC,UAAU,EAAG,GACrCd,OAAQH,EAAKA,OACbC,eAAgBD,EAAKa,UAAYA,EAAMA,QACvCX,QAASF,EAAKS,OAAO,IAAIS,KAAQ,OACjClB,KAAMA,GAEVY,EAAKO,KACD,kBAAC,EAAD,CAAKpB,IAAKA,EACNM,SAAUA,EACVD,OAAQA,MAGhBJ,EAAOA,EAAKoB,SACPC,IAAI,EAAG,OAGhB,OACI,yBAAKb,UAAU,WAAWF,IAAKM,EAAK,IAC/BA,ICgBFU,E,YA/CX,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KACDyB,MAAQ,CACTC,QAAO,GAHI,E,2EAmBf,IAZW,IAAD,OACNC,EAAQ,GACRC,GAAO,EACP1B,EAAO2B,KAAK7B,MAAMe,MAAMO,QAAQQ,QAAQ,SAASP,IAAI,KAAStB,IAAI,UAClE8B,EAAQ,EACRC,EAAa9B,EAAKa,QALZ,EAUNc,KAAK7B,MAFLO,EARM,EAQNA,SACAQ,EATM,EASNA,OAGIa,GACJD,EAAMN,KACF,kBAAC,EAAD,CAAMb,IAAKN,EACPA,KAAMA,EAAKoB,QACXP,MAAOA,EACPT,OAAQ,SAACL,GAAD,OAAS,EAAKD,MAAMM,OAAOL,IACnCM,SAAUA,KAGlBL,EAAKqB,IAAI,EAAG,KAEZK,EAAOG,IAAU,GAAKC,IAAe9B,EAAKa,QAC1CiB,EAAa9B,EAAKa,QAGtB,OAAOY,I,+BAGP,OACI,6BACI,iCACCE,KAAKI,oB,GAzCDC,IAAMC,WCDZC,G,MAAW,WACtB,OACI,yBAAK1B,UAAU,iBACX,0BAAMA,UAAU,OAAhB,OACA,0BAAMA,UAAU,OAAhB,OACA,0BAAMA,UAAU,OAAhB,OACA,0BAAMA,UAAU,OAAhB,OACA,0BAAMA,UAAU,OAAhB,OACA,0BAAMA,UAAU,OAAhB,OACA,0BAAMA,UAAU,OAAhB,UCJS2B,E,YACjB,WAAYrC,GAAQ,IAAD,8BACf,4CAAMA,KAoBVsC,SAAW,WACP,IAAIvB,EAAQ,EAAKU,MAAMV,MACnBwB,EAAYxB,EAAMA,EAAMyB,OAAO,GACnCzB,EAAMM,KAAKkB,EAAUE,SAAS,EAAG,UACjC,EAAKC,SAAS,CACV3B,MAAMA,KA1BK,EA8BnB4B,KAAO,WACH,IAAI5B,EAAQ,EAAKU,MAAMV,MACnBwB,EAAYxB,EAAMA,EAAMyB,OAAO,GACnCzB,EAAMM,KAAKkB,EAAUhB,IAAI,EAAG,UAC5B,EAAKmB,SAAS,CACV3B,MAAMA,KAnCK,EAuCnBT,OAAS,SAACL,GACN,EAAKyC,SAAS,CACVnC,SAAUN,EAAIC,KACda,MAAOd,EAAIC,KAAKoB,WA1CL,EA8CnBsB,iBAAmB,WACf,IAAI7B,EAAQ,EAAKU,MAAMV,MAAM,EAAKU,MAAMV,MAAMyB,OAAO,GACrD,OAAO,0BAAM9B,UAAU,eAAeK,GAASA,EAAMG,OAAO,eA9C5D,EAAKO,MAAQ,CACTV,MAAO,CAAC8B,OACRtC,SAAUsC,MAASf,QAAQ,QAJhB,E,iFAQE,IAAD,OAChBD,KAAKiB,KAAKC,QAAQC,iBAAiB,UAAU,SAACC,GAC1C,IAAIC,EAAiBC,OAAOF,EAAEG,OAAOC,UAAUJ,EAAEG,OAAOE,aAAa,KACrEC,QAAQC,IAAI,aAAaN,EAAeD,EAAEG,OAAOK,cACpC,KAAVR,EAAES,QACDT,EAAEG,OAAOC,UAAYJ,EAAEG,OAAOC,UAAY,IAE1CH,GAAkBD,EAAEG,OAAOK,cAC3B,EAAKd,Y,+BAoCP,IAAD,OACDgB,EAAUC,MAAMC,QAAQhC,KAAKJ,MAAMV,QAAUc,KAAKJ,MAAMV,MAAM+C,KAAI,SAACC,EAAIC,GACvE,OAAQ,kBAAC,EAAD,CAAQ1D,OAAQ,EAAKA,OAAQC,SAAU,EAAKkB,MAAMlB,SAAUQ,MAAOgD,OAE/E,OACI,6BACD,6BAASE,IAAI,UAAUvD,UAAU,YACjC,4BAAQA,UAAU,UACT,yBAAKA,UAAU,qBACX,uBAAGA,UAAU,yBAAyBE,QAASiB,KAAK7B,MAAMsC,WACzDT,KAAKe,mBACN,uBAAGlC,UAAU,0BAA0BE,QAASiB,KAAK7B,MAAM2C,QAE/D,kBAAC,EAAD,OAERgB,Q,GApE0BzB,IAAMC,W,MCS7B+B,MAXf,WACE,OACE,yBAAKxD,UAAU,OACb,4BAAQA,UAAU,cAElB,kBAAC,EAAD,SCGcyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dda0860d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Day = (props)=> {\r\n    const {\r\n        day,\r\n        day: {\r\n            date,\r\n            isCurrentMonth,\r\n            isToday,\r\n            number\r\n        },\r\n        select,\r\n        selected\r\n    } = props;\r\n\r\n    return (\r\n        <span\r\n            key={date.toString()}\r\n            className={\"day\" + (isToday ? \" today\" : \"\") + (isCurrentMonth ? \"\" : \" different-month\") + (date.isSame(selected) ? \" selected\" : \"\")}\r\n            onClick={() => select(day)}>{number}</span>\r\n    );\r\n\r\n}\r\nexport default Day","import React from 'react'\r\nimport Day from './Day.js'\r\nconst Week = (props) => {\r\n    let days = [];\r\n        let {\r\n            date,\r\n        } = props;\r\n\r\n        const {\r\n            month,\r\n            selected,\r\n            select,\r\n        } = props;\r\n\r\n        for (var i = 0; i < 7; i++) {\r\n            let day = {\r\n                name: date.format(\"dd\").substring(0, 1),\r\n                number: date.date(),\r\n                isCurrentMonth: date.month() === month.month(),\r\n                isToday: date.isSame(new Date(), \"day\"),\r\n                date: date\r\n            };\r\n            days.push(\r\n                <Day day={day}\r\n                    selected={selected}\r\n                    select={select} />\r\n            );\r\n\r\n            date = date.clone();\r\n            date.add(1, \"day\");\r\n        }\r\n\r\n        return (\r\n            <div className=\"row week\" key={days[0]}>\r\n                {days}\r\n            </div>\r\n        );\r\n\r\n}\r\n\r\n\r\nexport default Week","import React from 'react'\r\nimport Week from './Week'\r\nclass Months extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded:true\r\n        };\r\n    }\r\n    \r\n    renderWeeks() {\r\n        let weeks = [];\r\n        let done = false;\r\n        let date = this.props.month.clone().startOf(\"month\").add(\"w\" - 1).day(\"Sunday\");\r\n        let count = 0;\r\n        let monthIndex = date.month();\r\n\r\n        const {\r\n            selected,\r\n            month,\r\n        } = this.props;\r\n\r\n        while (!done) {\r\n            weeks.push(\r\n                <Week key={date}\r\n                    date={date.clone()}\r\n                    month={month}\r\n                    select={(day) => this.props.select(day)}\r\n                    selected={selected} />\r\n            );\r\n\r\n            date.add(1, \"w\");\r\n\r\n            done = count++ > 2 && monthIndex !== date.month();\r\n            monthIndex = date.month();\r\n        }\r\n\r\n        return weeks;\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section >\r\n                {this.renderWeeks()}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Months","import React from 'react'\r\n export const  DayNames = () => {\r\n    return (\r\n        <div className=\"row day-names\">\r\n            <span className=\"day\">Sun</span>\r\n            <span className=\"day\">Mon</span>\r\n            <span className=\"day\">Tue</span>\r\n            <span className=\"day\">Wed</span>\r\n            <span className=\"day\">Thu</span>\r\n            <span className=\"day\">Fri</span>\r\n            <span className=\"day\">Sat</span>\r\n        </div>\r\n    );\r\n}\r\n\r\n","\r\nimport React from \"react\";\r\nimport moment from 'moment';\r\nimport Months from './Months'\r\nimport '../css/calender-style.css'\r\nimport {DayNames} from \"./DayNames\"\r\nexport default class Calendar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            month: [moment()],\r\n            selected: moment().startOf('day')\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refs.iScroll.addEventListener(\"scroll\", (e) => {\r\n            let scrollPosition = Number(e.target.scrollTop+e.target.clientHeight+100)\r\n            console.log('mmmmmmmmmm',scrollPosition,e.target.scrollHeight)\r\n            if(e.which===40){\r\n                e.target.scrollTop = e.target.scrollTop + 24;\r\n                }\r\n            if (scrollPosition >= e.target.scrollHeight){\r\n                this.next();\r\n            }\r\n        });\r\n    }\r\n\r\n    previous = () => {\r\n        let month = this.state.month;\r\n        let lastMonth = month[month.length-1];\r\n        month.push(lastMonth.subtract(1, 'month'))\r\n        this.setState({\r\n            month:month \r\n        });\r\n    }\r\n\r\n    next = () =>{\r\n        let month = this.state.month;\r\n        let lastMonth = month[month.length-1];\r\n        month.push(lastMonth.add(1, 'month'))\r\n        this.setState({\r\n            month:month \r\n        });\r\n    }\r\n\r\n    select = (day) =>{\r\n        this.setState({\r\n            selected: day.date,\r\n            month: day.date.clone(),\r\n        });\r\n    }\r\n\r\n    renderMonthLabel = () =>{\r\n        let month = this.state.month[this.state.month.length-1];\r\n        return <span className=\"month-label\">{month && month.format(\"MMMM YYYY\")}</span>;\r\n    }\r\n    \r\n\r\n    render() {\r\n        let cMonths = Array.isArray(this.state.month) && this.state.month.map((mon,index)=>{\r\n            return (<Months select={this.select} selected={this.state.selected} month={mon}/>)\r\n        })\r\n        return (\r\n            <div>\r\n           <section ref=\"iScroll\" className=\"calendar\">\r\n           <header className=\"header\">\r\n                    <div className=\"month-display row\">\r\n                        <i className=\"arrow fa fa-angle-left\" onClick={this.props.previous} />\r\n                        {this.renderMonthLabel()}\r\n                        <i className=\"arrow fa fa-angle-right\" onClick={this.props.next} />\r\n                    </div>\r\n                    <DayNames />\r\n                </header>\r\n           {cMonths}\r\n           </section>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport Calendar from './component/Calender'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       \n      <Calendar />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}